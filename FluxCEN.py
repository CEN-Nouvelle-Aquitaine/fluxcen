# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FluxCEN
                                 A QGIS plugin
 Centralisation des flux WFS/WMS utilisés au CEN NA
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-23
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Romain MONTILLET
        email                : r.montillet@cen-na.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QUrl
from qgis.PyQt.QtGui import QFont, QDesktopServices, QStandardItemModel, QStandardItem, QIcon, QPixmap
from qgis.PyQt.QtWidgets import QAbstractItemView, QWidget, QTableWidget, QTableWidgetItem, QVBoxLayout, QAction, QTextBrowser, QMessageBox, QLabel, QDialog, QPushButton
from qgis.utils import iface

from qgis.core import (
    Qgis, QgsApplication, QgsRasterLayer, QgsVectorLayer,
    QgsProject, QgsDataSourceUri
)

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .FluxCEN_dialog import FluxCENDialog

import yaml
import os.path, os
from PyQt5.QtXml import QDomDocument
import csv
import os
import io
import re
import ssl
import urllib
from urllib import request, parse
import socket
import requests

#Dataviz:
import datetime
import sqlite3
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

ssl._create_default_https_context = ssl._create_unverified_context



# Vérifier la connexion à internet
try:
    # Vérifier si l'utilisateur est connecté à internet en ouvrant une connexion avec un site web
    host = socket.gethostbyname("www.google.com")
    s = socket.create_connection((host, 80), 2)
    s.close()
except socket.error:
    # Afficher un message si l'utilisateur n'est pas connecté à internet
    QMessageBox.warning(None, 'Avertissement',
                        'Vous n\'êtes actuellement pas connecté à internet. Veuillez vous connecter pour pouvoir utiliser FluxCEN !')




class Popup(QWidget):
    def __init__(self, parent=None):
        super(Popup, self).__init__(parent)

        self.flux_cen = flux_cen_instance
        
        try:
            _,_,_,info_changelog= self.flux_cen.load_urls('config/yaml/links.yaml')
            print(f"Info changelog url: {info_changelog}")
        except Exception as e:
            print(f"Error loading URLs: {e}")

        self.plugin_dir = os.path.dirname(__file__)

        self.text_edit = QTextBrowser()
        fp = urllib.request.urlopen(info_changelog)
        mybytes = fp.read()
        html_changelog = mybytes.decode("utf8")
        fp.close()

        self.text_edit.setHtml(html_changelog)
        self.text_edit.setFont(QFont("Calibri",weight=QFont.Bold))
        self.text_edit.anchorClicked.connect(QDesktopServices.openUrl)
        self.text_edit.setOpenLinks(False)

        self.text_edit.setWindowTitle("Nouveautés")
        self.text_edit.setMinimumSize(600,550)


# class BarChartPopup(QWidget):
#     def __init__(self, parent=None):
#         super(BarChartPopup, self).__init__(parent)

#         # Set up the layout
#         layout = QVBoxLayout()
#         self.setLayout(layout)

#         # Load data from SQLite database
#         data = self.load_data_from_database()

#         # Create a single figure
#         plt.figure(figsize=(12, 8))

#         # Create and display all visualizations
#         self.create_time_series_plot(data)
#         self.create_pie_chart(data)
#         self.create_stacked_bar_chart(data)
#         self.create_histogram(data)

#         # Display the figure
#         plt.tight_layout()
#         plt.show()

#         # Close button
#         close_button = QPushButton('Close')
#         close_button.clicked.connect(self.close)
#         layout.addWidget(close_button)

#     def load_data_from_database(self):
#         # Connect to the SQLite database
#         conn = sqlite3.connect('analytics.db')
#         cursor = conn.cursor()

#         # Execute a query to retrieve data for the visualizations
#         cursor.execute("SELECT * FROM analytics")
#         data = cursor.fetchall()

#         # Close the cursor and connection
#         cursor.close()
#         conn.close()

#         return data

#     def create_time_series_plot(self, data):
#         timestamps = [row[1] for row in data]

#         # Create a time series plot
#         plt.subplot(2, 2, 1)
#         plt.plot(timestamps, range(len(timestamps)), marker='o')
#         plt.xlabel('Temps')
#         plt.ylabel('Nombre de couches chargées depuis FluxCEN')
#         plt.title("Suivi de l'utilisation de FluxCEN dans le temps")
#         plt.xticks(rotation=45)

#     def create_pie_chart(self, data):
#         usernames = [row[2] for row in data]
#         unique_usernames = list(set(usernames))
#         counts = [usernames.count(username) for username in unique_usernames]

#         # Create a pie chart
#         plt.subplot(2, 2, 2)
#         plt.pie(counts, labels=unique_usernames, autopct='%1.1f%%', startangle=140)
#         plt.axis('equal')
#         plt.title('Chargement des couches depuis FluxCEN par utilisateur')

#     def create_stacked_bar_chart(self, data):
#         # Extract layer names from the data
#         layer_names = [row[3] for row in data]

#         # Count the number of layer additions for each layer
#         layer_counts = {}
#         for layer in layer_names:
#             layer_counts[layer] = layer_counts.get(layer, 0) + 1

#         # Sort the layers based on their counts
#         sorted_layers = sorted(layer_counts.items(), key=lambda x: x[1], reverse=True)

#         # Select the top 10 layers
#         top_layers = dict(sorted_layers[:3])

#         # Create a stacked bar chart for the top 10 layers
#         plt.subplot(2, 2, 3)
#         plt.bar(top_layers.keys(), top_layers.values())
#         plt.xlabel('Nom des couches')
#         plt.ylabel('Nombre de couches chargées')
#         plt.title('Top 10 des couches les plus chargées')
#         plt.xticks(rotation=45)


#     def create_histogram(self, data):
#         # Extract timestamps from the data
#         timestamps = [row[1] for row in data]

#         # Create a histogram
#         plt.subplot(2, 2, 4)
#         plt.hist(timestamps, bins=20, color='skyblue', edgecolor='black')
#         plt.xlabel('Temps')
#         plt.ylabel('Nombre de couches chargées')
#         plt.title('Distribution des chargements de couches en fonction du temps')
#         plt.xticks(rotation=45)

class FluxCEN:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FluxCEN_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&FluxCEN')
        self.dlg = FluxCENDialog()

        self.plugin_path = os.path.dirname(__file__)

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.dlg.tableWidget.setSelectionBehavior(QTableWidget.SelectRows)
        self.dlg.tableWidget.setEditTriggers(QAbstractItemView.NoEditTriggers)

        self.dlg.comboBox.currentIndexChanged.connect(self.initialisation_flux)
        self.dlg.commandLinkButton.clicked.connect(self.selection_flux)
        self.dlg.tableWidget.itemDoubleClicked.connect(self.selection_flux)
        self.dlg.pushButton_2.clicked.connect(self.limite_flux)
        self.dlg.commandLinkButton_2.clicked.connect(self.suppression_flux)
        self.dlg.tableWidget_2.itemDoubleClicked.connect(self.suppression_flux)
        self.dlg.comboBox.addItem("toutes les catégories")
        self.dlg.commandLinkButton_3.clicked.connect(self.option_OSM)
        self.dlg.commandLinkButton_4.clicked.connect(self.option_google_maps)

        self.dlg.commandLinkButton_5.clicked.connect(self.popup)
        # self.dlg.commandLinkButton_6.clicked.connect(self.dataviz_popup)

        # iface.mapCanvas().extentsChanged.connect(self.test5)
        # Load URLs and handle possible errors
        try:
            flux_csv_url, last_version_url, _, _= self.load_urls('config/yaml/links.yaml')
        except Exception as e:
            self.iface.messageBar().pushMessage("Error", f"Failed to load URLs: {e}", level=Qgis.Critical, duration=5)
            return
        
        url_open = urllib.request.urlopen(flux_csv_url)
        colonnes_flux = csv.DictReader(io.TextIOWrapper(url_open, encoding='utf8'), delimiter=';')

        mots_cles = [row["categorie"] for row in colonnes_flux if row["categorie"]]
        categories = list(set(mots_cles))
        categories.sort()

        self.dlg.comboBox.addItems(categories)
        layout = QVBoxLayout()
        self.dlg.lineEdit.textChanged.connect(self.filtre_dynamique)
        layout.addWidget(self.dlg.lineEdit)
        self.dlg.lineEdit.mousePressEvent = self._mousePressEvent

        metadonnees_plugin = open(self.plugin_path + '/metadata.txt')
        infos_metadonnees = metadonnees_plugin.readlines()

        derniere_version = urllib.request.urlopen(last_version_url)
        num_last_version = derniere_version.readlines()[0].decode("utf-8")

        # Connect the itemClicked signal to the open_url function
        self.dlg.tableWidget.itemClicked.connect(self.open_url)

        version_utilisateur = infos_metadonnees[8].splitlines()

        if infos_metadonnees[8].splitlines() == num_last_version.splitlines():
            iface.messageBar().pushMessage("Plugin à jour", "Votre version de FluxCEN %s est à jour !" %version_utilisateur, level=Qgis.Success, duration=5)
        else:
            iface.messageBar().pushMessage("Information :", "Une nouvelle version de FluxCEN est disponible, veuillez mettre à jour le plugin !", level=Qgis.Info, duration=120)

    def _mousePressEvent(self, event):
        self.dlg.lineEdit.setText("")
        self.dlg.lineEdit.mousePressEvent = None

    def show_welcome_popup(self):
        """
        Affiche une fenêtre avec une image au démarrage, centre l'image et ajoute un texte en dessous.
        """
        # Créer un QDialog (fenêtre personnalisée)
        dialog = QDialog()
        dialog.setWindowTitle("Nouvelle version : FluxCEN 4.5 !")

        # Créer un layout
        layout = QVBoxLayout()

        # Ajouter une image (remplace 'maj_4.5.JPG' par le chemin de ton image)
        label_image = QLabel()
        pixmap = QPixmap(self.plugin_path + "/icons/maj_4.5.JPG")  # Chemin absolu ou relatif de ton image

        # Vérifier si l'image existe et est chargée
        if not pixmap.isNull():
            # Redimensionner l'image à une taille raisonnable si nécessaire
            pixmap = pixmap.scaled(600, 400, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            label_image.setPixmap(pixmap)
            label_image.setAlignment(Qt.AlignCenter)  # Centre l'image
        else:
            label_image.setText("Image introuvable")
            label_image.setAlignment(Qt.AlignCenter)

        # Ajouter le label avec l'image au layout
        layout.addWidget(label_image)

        # Ajouter un label avec du texte (la version et description)
        label_text = QLabel("Version 4.5 (11/10/2024): MAJ significative permettant un chargement beaucoup plus rapide des différents flux ! 🚀💥")
        label_text.setAlignment(Qt.AlignCenter)  # Centre le texte
        label_text.setFont(QFont("Calibri", 12, QFont.Bold))  # Style du texte
        layout.addWidget(label_text)

        # Ajouter un bouton de fermeture
        button = QPushButton("Fermer")
        button.clicked.connect(dialog.accept)
        layout.addWidget(button)

        # Centrer le bouton
        layout.setAlignment(button, Qt.AlignCenter)

        # Appliquer le layout à la fenêtre
        dialog.setLayout(layout)

        # Définir la taille minimum du dialog pour s'adapter à l'image et au texte
        dialog.setMinimumSize(620, 500)  # Ajuste la taille pour correspondre à l'image, texte et bouton

        # Afficher la fenêtre
        dialog.exec_()


    def is_first_run_of_new_version(self):
        """
        Vérifie si c'est la première fois que cette version du plugin est démarrée en utilisant la version
        du plugin stockée dans 'metadata.txt' et la dernière version disponible en ligne.
        """
        settings = QSettings()

        # Obtenir la version actuelle du plugin depuis le fichier 'metadata.txt'
        metadonnees_plugin = open(self.plugin_path + '/metadata.txt')
        infos_metadonnees = metadonnees_plugin.readlines()
        version_utilisateur = infos_metadonnees[8].strip()  # Version actuelle du plugin (par exemple, '4.5.1')

        # Charger la dernière version depuis l'URL
        try:
            _, last_version_url, _, _ = self.load_urls('config/yaml/links.yaml')
            derniere_version = urllib.request.urlopen(last_version_url)
            num_last_version = derniere_version.readlines()[0].decode("utf-8").strip()  # Récupérer la dernière version disponible
        except Exception as e:
            self.iface.messageBar().pushMessage("Error", f"Failed to load URLs: {e}", level=Qgis.Critical, duration=5)
            return False

        # Obtenir la dernière version utilisée stockée dans les paramètres
        last_version = settings.value("FluxCEN/last_version", "", type=str)

        # Comparer la version actuelle avec la dernière version utilisée
        if last_version != version_utilisateur or version_utilisateur != num_last_version:
            # Si la version a changé, c'est un premier démarrage de cette version
            settings.setValue("FluxCEN/last_version", version_utilisateur)  # Mettre à jour la version stockée
            return True

        return False


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FluxCEN', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget
        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        """
        Fonction appelée au démarrage du plugin.
        """

        # Vérifier si c'est le premier démarrage de cette version
        if self.is_first_run_of_new_version():
            self.show_welcome_popup()


        icon_path = ':/plugins/FluxCEN/icons/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'FluxCEN'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&FluxCEN'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    # Charger les configurations depuis le fichier YAML et récupérer les informations de connexion pour PostGIS
    def load_postgis_config(self, yaml_file):
        config_path = os.path.join(self.plugin_path, yaml_file)
        with open(config_path, 'r') as file:
            config = yaml.safe_load(file)
        
        # Assurer que 'database' est une clé valide dans le fichier YAML
        db_config_list = config.get('database', [])
        
        # Trouver et retourner la configuration pour PostGIS
        for db in db_config_list:
            if db['type'] == 'PostGIS':
                return db
        
        return None
    
    
    def load_urls(self, yaml_file):
        # Charger le fichier YAML contenant plusieurs clés
        config_path = os.path.join(self.plugin_path, yaml_file)
        
        # Lire le fichier YAML
        with open(config_path, 'r') as file:
            config = yaml.safe_load(file)
        
        # Extraire les URL pour chaque clé
        github_urls = config.get('github_urls', {})
        depot_plugins_url = config.get('depot_plugins_url', {})

        # Accéder aux sous-clés spécifiques
        flux_csv_url = github_urls.get('flux_csv')  # Utilisation correcte de la clé 'flux_csv'
        styles_couches = github_urls.get('styles_couches')
        info_changelog = github_urls.get('info_changelog')
        last_version_url = depot_plugins_url.get('last_version')

        return flux_csv_url, last_version_url, styles_couches, info_changelog
    

    def suppression_flux(self):
        self.dlg.tableWidget_2.removeRow(self.dlg.tableWidget_2.currentRow())

    def option_OSM(self):
        tms = 'type=xyz&url=https://tile.openstreetmap.org/{z}/{x}/{y}.png&zmax=19&zmin=0'
        layer = QgsRasterLayer(tms, 'OSM', 'wms')

        if not QgsProject.instance().mapLayersByName("OSM"):
            QgsProject.instance().addMapLayer(layer)
        else:
            QMessageBox.question(iface.mainWindow(), u"Fond OSM déjà chargé !", "Le fond de carte OSM est déjà chargé", QMessageBox.Ok)

        OSM_layer = QgsProject.instance().mapLayersByName("OSM")[0]

        root = QgsProject.instance().layerTreeRoot()

        OSM_layer = root.findLayer(OSM_layer.id())
        myClone = OSM_layer.clone()
        parent = OSM_layer.parent()
        parent.insertChildNode(-1, myClone)
        parent.removeChildNode(OSM_layer)


    def option_google_maps(self):
        tms = 'type=xyz&zmin=0&zmax=20&url=https://mt1.google.com/vt/lyrs%3Ds%26x%3D{x}%26y%3D{y}%26z%3D{z}'
        layer = QgsRasterLayer(tms, 'Google Satelitte', 'wms')

        if not QgsProject.instance().mapLayersByName("Google Satelitte"):
            QgsProject.instance().addMapLayer(layer)
        else:
            QMessageBox.question(iface.mainWindow(), u"Fond Google Sat' déjà chargé !", "Le fond de carte Google Satelitte est déjà chargé", QMessageBox.Ok)

        google_layer = QgsProject.instance().mapLayersByName("Google Satelitte")[0]

        root = QgsProject.instance().layerTreeRoot()

        google_layer = root.findLayer(google_layer.id())
        myClone = google_layer.clone()
        parent = google_layer.parent()
        parent.insertChildNode(-1, myClone)
        parent.removeChildNode(google_layer)


    def open_url(self, item):
        url = item.data(Qt.UserRole)
        if url:
            QDesktopServices.openUrl(QUrl(url))



    def initialisation_flux(self):

        # Unpacking de flux_csv_url et on ignore last_version_url, info_changelog, styles_couches
        flux_csv_url, _, _, _ = self.load_urls('config/yaml/links.yaml')

        def csv_import(url):
            url_open = urllib.request.urlopen(url)
            csvfile = csv.reader(io.TextIOWrapper(url_open, encoding='utf8'), delimiter=';')
            #on ne lit pas la première ligne correspondant aux noms des colonnes avec next()
            next(csvfile)
            return csvfile

        data = []
        data2 = []
        model = QStandardItemModel()


        raw = csv_import(flux_csv_url)


        for row in raw:
            data.append(row)
            data2.append(row)
            data = [k for k in data if self.dlg.comboBox.currentText() in k]
            data.sort()
            data2.sort()
            items = [
                QStandardItem(field)
                for field in row]

            model.appendRow(items)

        if self.dlg.comboBox.currentText() == 'toutes les catégories':

            nb_row = len(data2)
            nb_col = len(data2[0])

            self.dlg.tableWidget.setRowCount(nb_row)
            self.dlg.tableWidget.setColumnCount(nb_col)
            for row in range(nb_row):
                for col in range(nb_col):
                    item = QTableWidgetItem(str(data2[row][col]))
                    # Access the value from the 4th column for the current row (style here)
                    value_from_4th_column = str(data2[row][3])
                    # Set tooltip for each row
                    tooltip = f"Nom technique du flux: {value_from_4th_column}"
                    item.setToolTip(tooltip)

                    # Check if the current column is the "Résumé des métadonnées" column
                    if col == 7:
                        # Set icon for the "Résumé des métadonnées" column
                        icon_path = self.plugin_path + '/icons/info_metadata.png' 
                        icon = QIcon(icon_path)
                        item.setIcon(icon)   
                        # Store the URL in the item's data for later retrieval
                        url_from_6th_column = str(data2[row][7])  
                        item.setData(Qt.UserRole, url_from_6th_column)

                    self.dlg.tableWidget.setItem(row, col, item)
        else:
            nb_row = len(data)
            nb_col = len(data[0])
            self.dlg.tableWidget.setRowCount(nb_row)
            self.dlg.tableWidget.setColumnCount(nb_col)
            for row in range(nb_row):
                for col in range(nb_col):
                    item = QTableWidgetItem(str(data[row][col]))
                    ## Problème ici car décalage d'une ligne :
                    ##  Access the value from the 4th column for the current row (style here)
                    # value_from_4th_column = str(data2[row][3])
                    ##  Set tooltip for each row
                    # tooltip = f"Nom technique du flux: {value_from_4th_column}"
                    # item.setToolTip(tooltip)

                    # Check if the current column is the "Résumé des métadonnées" column
                    if col == 7:
                        # Set icon for the "Résumé des métadonnées" column
                        icon_path = self.plugin_path + '/icons/metadata.png' 
                        icon = QIcon(icon_path)
                        item.setIcon(icon)   
                        # Store the URL in the item's data for later retrieval
                        url_from_6th_column = str(data2[row][7])  
                        item.setData(Qt.UserRole, url_from_6th_column)

                    self.dlg.tableWidget.setItem(row, col, item)

        self.dlg.tableWidget.setHorizontalHeaderLabels(["Service", "Catégorie", "Flux", "Nom technique", "Url d'accès", "Source", "Style", "Infos"])

        self.dlg.tableWidget.setColumnWidth(0, 76)
        self.dlg.tableWidget.setColumnWidth(1, 0)
        self.dlg.tableWidget.setColumnWidth(2, 610)
        self.dlg.tableWidget.setColumnWidth(3, 0)
        self.dlg.tableWidget.setColumnWidth(4, 0)
        self.dlg.tableWidget.setColumnWidth(5, 88)
        self.dlg.tableWidget.setColumnWidth(6, 0)
        self.dlg.tableWidget.setColumnWidth(7, 30)
        self.dlg.tableWidget.setColumnWidth(8, 0)
        self.dlg.tableWidget.setColumnWidth(9, 0)

        self.dlg.tableWidget.selectRow(0)

    def selection_flux(self):
        selected_row = 0
        selected_items = self.dlg.tableWidget.selectedItems()

        new_item_text = selected_items[3].text()

        if not self.item_already_exists(new_item_text):
            self.dlg.tableWidget_2.insertRow(selected_row)

            for column in range(self.dlg.tableWidget.columnCount()):
                cloned_item = selected_items[column].clone()
                self.dlg.tableWidget_2.setHorizontalHeaderLabels(["Service", "Catégorie", "Flux sélectionné", "Nom technique", "Url d'accès", "Source", "Style", "Infos"])
                self.dlg.tableWidget_2.setColumnCount(10)
                self.dlg.tableWidget_2.setItem(selected_row, column, cloned_item)

            self.dlg.tableWidget_2.setColumnWidth(0, 80)
            self.dlg.tableWidget_2.setColumnWidth(1, 0)
            self.dlg.tableWidget_2.setColumnWidth(2, 640)
            self.dlg.tableWidget_2.setColumnWidth(3, 0)
            self.dlg.tableWidget_2.setColumnWidth(4, 0)
            self.dlg.tableWidget_2.setColumnWidth(5, 100)
            self.dlg.tableWidget_2.setColumnWidth(6, 0)
            self.dlg.tableWidget_2.setColumnWidth(7, 0)
            self.dlg.tableWidget_2.setColumnWidth(8, 0)
            self.dlg.tableWidget_2.setColumnWidth(9, 0)

    def item_already_exists(self, new_item_text):

        existing_items = self.dlg.tableWidget_2.findItems(new_item_text, QtCore.Qt.MatchExactly)

        return len(existing_items) > 0


    def limite_flux(self):

        if self.dlg.tableWidget_2.rowCount() > 3:
            self.QMBquestion = QMessageBox.question(iface.mainWindow(), u"Attention !",
                                                    "Le nombre de flux à charger en une seule fois est limité à 3 pour des questions de performances. Souhaitez vous tout de même charger les " + str(
                                                        self.dlg.tableWidget_2.rowCount()) + " flux sélectionnés ? (risque de plantage de QGIS)",
                                                    QMessageBox.Yes | QMessageBox.No)
            if self.QMBquestion == QMessageBox.Yes:
                self.chargement_flux()

            if self.QMBquestion == QMessageBox.No:
                print("Annulation du chargement des couches")

        if self.dlg.tableWidget_2.rowCount() <= 3:
            self.chargement_flux()


    def apply_qml_style(self, wfs_layer, style_url):
        """
        Function to apply QML style to a WFS layer.
        """

        try:
            # Récupération des styles depuis url github
            response = request.urlopen(style_url)
            style_data = response.read()

            #"Décorticage" du style QML en utilisant QDomDocument
            document = QDomDocument()
            if not document.setContent(style_data):
                print("Echec de l'ouverture du style QML.")
                return

            # on applique le style au flux
            if not wfs_layer.importNamedStyle(document):
                print(f"Echec, le style n'a pas pu être appliqué au flux: {wfs_layer.name()}")
            else:
                print(f"Le style a bien été appliqué au flux: {wfs_layer.name()}")

            #Actualisation de la couche pour prendre en compte le nouveau style
            wfs_layer.triggerRepaint()

        except Exception as e:
            print(f"Problème dans l'application du style: {e}")


    def apply_authentication_if_needed(self, uri):
        """
        Vérifie s'il existe une configuration d'authentification et l'applique à l'uri si nécessaire.
        
        Parameters:
            uri (QgsDataSourceUri): L'uri de la source de données à laquelle on doit éventuellement ajouter l'authentification.

        Returns:
            bool: True si l'authentification a été appliquée, False sinon.
        """
        managerAU = QgsApplication.authManager()
        auth_configs = list(managerAU.availableAuthMethodConfigs().keys())  # Récupération des configurations disponibles

        if auth_configs:
            uri.setAuthConfigId(auth_configs[0])  # Applique la première configuration d'authentification disponible
            return True
        else:
            QMessageBox.warning(iface.mainWindow(), "Attention", 
                "Aucune configuration d'authentification disponible. Veuillez ajouter une configuration d'authentification dans QGIS.",
                QMessageBox.Ok)
            return False

    def avertissement_pas_de_flux(self):
        """
        Affiche un QMessageBox pour indiquer qu'il n'y a pas de flux à charger si tableWidget_2 est vide.
        """
        QMessageBox.information(iface.mainWindow(), "Aucun flux pré-chargé", "Il n'y a aucun flux à charger dans la table de sélection.", QMessageBox.Ok)


    def chargement_flux(self):
        """
        Main function to load layers from tableWidget_2 based on service type (WMS, WFS, PostGIS).
        """
        _, _, styles_couches, _ = self.load_urls('config/yaml/links.yaml')

        # Vérifier si tableWidget_2 est vide
        if self.dlg.tableWidget_2.rowCount() == 0:
            self.avertissement_pas_de_flux()
            return  # Quitter la fonction si la table est vide

        # Iterate through each row in the tableWidget_2
        for row in range(self.dlg.tableWidget_2.rowCount()):
            try:
                data = self.parse_table_row(row, styles_couches)
                if not data:
                    continue

                service, nom_couche, nom_technique, url, style_url = data

                # Handle different service types
                if service.startswith("WMS"):
                    self.handle_wms_layer(row, nom_couche, nom_technique, url, style_url)
                elif service == "WFS":
                    self.handle_wfs_layer(row, nom_couche, nom_technique, url, style_url)
                elif service == "PostGIS":
                    self.handle_postgis_layer(row)

            except AttributeError:
                print(f"Erreur: données manquantes dans la ligne: {row}")
                continue  # Skip the row if there are missing fields

        # Vider le contenu de tableWidget_2
        self.dlg.tableWidget_2.clearContents()  # Efface les cellules existantes
        self.dlg.tableWidget_2.setRowCount(0)   # Réinitialise le nombre de lignes à 0

    def parse_table_row(self, row, styles_couches):
        """
        Extract relevant data from a given row in tableWidget_2.
        """
        try:
            service = self.dlg.tableWidget_2.item(row, 0).text()  # Type of service (WFS, WMS, PostGIS)
            nom_couche = self.dlg.tableWidget_2.item(row, 2).text()  # Layer name
            nom_technique = self.dlg.tableWidget_2.item(row, 3).text()  # Technical layer name
            url = self.dlg.tableWidget_2.item(row, 4).text()  # URL of the service
            nom_style = self.dlg.tableWidget_2.item(row, 6).text()  # Optional QML style
            style_url = styles_couches + nom_style + ".qml" if nom_style and len(nom_style.strip()) >= 2 else None
            return service, nom_couche, nom_technique, url, style_url
        except AttributeError:
            print(f"Erreur: données manquantes dans la ligne: {row}")
            return None  # Return None if there are missing fields

    def handle_wms_layer(self, row, nom_couche, nom_technique, url, style_url):
        """
        Handle WMS layer loading and apply authentication if necessary.
        """
        try:
            version = re.search('VERSION=(.+?)&REQUEST', url).group(1)
        except:
            version = '1.0.0'

        wms_layer_url = (
            f"url={url}&"
            f"service=WMS&"
            f"version={version}&"
            f"crs=EPSG:2154&"
            f"format=image/png&"
            f"layers={nom_technique}&"
            f"styles"
        )

        uri = QgsDataSourceUri()
        if not self.apply_authentication_if_needed(uri):
            return  # Skip if authentication fails
        print(wms_layer_url)
        wms_layer = QgsRasterLayer(wms_layer_url, nom_couche, "wms")
        if not wms_layer.isValid():
            print(f"Failed to load WMS layer: {nom_couche}")
            return

        QgsProject.instance().addMapLayer(wms_layer)

    def handle_wfs_layer(self, row, nom_couche, nom_technique, url, style_url):
        """
        Handle WFS layer loading and apply authentication if necessary.
        """
        try:
            version = re.search('VERSION=(.+?)&REQUEST', url).group(1)
        except:
            version = '1.0.0'

        uri = QgsDataSourceUri()
        uri.setParam("url", url)
        uri.setParam("version", version)
        uri.setParam("typename", nom_technique)
        uri.setParam("request", "GetFeature")

        if not self.apply_authentication_if_needed(uri):
            return  # Skip if authentication fails

        wfs_layer = QgsVectorLayer(uri.uri(), nom_couche, "WFS")
        if not wfs_layer.isValid():
            print(f"Failed to load WFS layer: {nom_couche}")
            return

        QgsProject.instance().addMapLayer(wfs_layer)

        if style_url:
            self.apply_qml_style(wfs_layer, style_url)
        else:
            print(f"Pas de style à charger pour la couche: {nom_couche}")

    def handle_postgis_layer(self, row):
        """
        Handle PostGIS layer loading and apply authentication if necessary.
        """
        postgis_config = self.load_postgis_config('config/yaml/config_db.yaml')
        if not postgis_config:
            QMessageBox.critical(iface.mainWindow(), "Erreur", "Impossible de charger la configuration PostGIS depuis le fichier YAML.", QMessageBox.Ok)
            return

        db_host = postgis_config['host']
        db_port = str(postgis_config['port'])
        db_name = self.dlg.tableWidget_2.item(row, 8).text()
        schema_name = self.dlg.tableWidget_2.item(row, 9).text()
        table_name = self.dlg.tableWidget_2.item(row, 3).text()

        if not (db_host and db_port and db_name and schema_name and table_name):
            QMessageBox.critical(iface.mainWindow(), "Erreur", "Des informations de connexion sont manquantes pour la base de données PostGIS.", QMessageBox.Ok)
            return

        uri = QgsDataSourceUri()
        uri.setConnection(db_host, db_port, db_name, None, None)

        if not self.apply_authentication_if_needed(uri):
            return  # Skip if authentication fails

        uri.setDataSource(schema_name, table_name, "geom")

        layer = QgsVectorLayer(uri.uri(), self.dlg.tableWidget_2.item(row, 2).text(), "postgres")
        if layer.isValid():
            QgsProject.instance().addMapLayer(layer)
        else:
            QMessageBox.critical(iface.mainWindow(), "Erreur", f"Échec de chargement de la couche PostGIS : {table_name}", QMessageBox.Ok)

        


    def filtre_dynamique(self, filter_text):

        for i in range(self.dlg.tableWidget.rowCount()):
            for j in range(self.dlg.tableWidget.columnCount()):
                item = self.dlg.tableWidget.item(i, j)
                match = filter_text.lower() not in item.text().lower()
                self.dlg.tableWidget.setRowHidden(i, match)
                if not match:
                    break



    # def plugin_analytics(self):
    #     # Get the current timestamp
    #     timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    #     # Get the username (Windows session username)
    #     username = os.getenv('USERNAME')

    #     # Get the current date and time
    #     current_datetime = datetime.datetime.now()

    #     # Calculate the last insertion time (8 hours ago)
    #     last_insertion_time = current_datetime - datetime.timedelta(hours=8)

    #     # Check if the SQLite database file exists, if not, create it
    #     if not os.path.exists('analytics.db'):
    #         with open('analytics.db', 'w'):
    #             pass

    #     # Connect to the SQLite database (creates if not exists)
    #     conn = sqlite3.connect('analytics.db')

    #     # Create a cursor object to execute SQL queries
    #     cursor = conn.cursor()

    #     # Create the analytics table if it doesn't exist
    #     cursor.execute('''CREATE TABLE IF NOT EXISTS analytics (
    #                         id INTEGER PRIMARY KEY,
    #                         timestamp TEXT,
    #                         username TEXT,
    #                         layer_name TEXT,
    #                         last_insertion_time TEXT,
    #                         UNIQUE(username, layer_name)
    #                     )''')

    #     # Extract layer names loaded in QGIS
    #     layer_names = []

    #     for row in range(self.dlg.tableWidget_2.rowCount()):
    #         layer_name = self.dlg.tableWidget_2.item(row, 2).text()
    #         layer_names.append(layer_name)

    #     try:
    #         # Check the last insertion time for each user and layer combination
    #         for layer_name in layer_names:
    #             cursor.execute(
    #                 "SELECT last_insertion_time FROM analytics WHERE username = ? AND layer_name = ?",
    #                 (username, layer_name)
    #             )
    #             last_insertion_time = cursor.fetchone()

    #             # If last insertion time is None or more than 8 hours ago, insert data into the database
    #             if not last_insertion_time or current_datetime - datetime.datetime.strptime(last_insertion_time[0], '%Y-%m-%d %H:%M:%S') > datetime.timedelta(hours=8):
    #                 cursor.execute(
    #                     "INSERT INTO analytics (timestamp, username, layer_name, last_insertion_time) VALUES (?, ?, ?, ?)",
    #                     (timestamp, username, layer_name, timestamp)
    #                 )

    #         # Commit the transaction
    #         conn.commit()
    #         print('Data successfully inserted into the database')

    #     except sqlite3.Error as e:
    #         # Rollback the transaction in case of error
    #         conn.rollback()
    #         print('Error:', e)

    #     finally:
    #         # Close the cursor and database connection
    #         cursor.close()
    #         conn.close()

            



    def popup(self):

        self.dialog = Popup()  # +++ - self
        self.dialog.text_edit.show()

flux_cen_instance = FluxCEN(iface)


    # def dataviz_popup(self):

    #     self.dialog = BarChartPopup()  # +++ - self

# from owslib.wfs import WebFeatureService
# import csv

# wfs = WebFeatureService(url='https://opendata.cen-nouvelle-aquitaine.org/geoserver/agriculture/wfs')
# agriculture = list(wfs.contents)
# with open('C:/Users/Romain/Desktop/test.csv', "a+", encoding="ISO-8859-1", newline='') as f:
#     writer = csv.writer(f)
#     for row in agriculture:
#         writer.writerow(row.split())
#
# from owslib.wms import WebMapService
# wms = WebMapService('https://opendata.cen-nouvelle-aquitaine.org/geoserver/fond_carto/wms')
# fonds_carto = list(wms.contents)
# with open('C:/Users/Romain/Desktop/test.csv', "a+", encoding="ISO-8859-1", newline='') as f:
#     writer = csv.writer(f)
#     for row in fonds_carto:
#         writer.writerow(row.split())
#
# import csv
#
# fluxWMS = ['AGG_TMM', '16-014_Brandes_de_Soyaux_2020-05', '17IMERIS_Bois-Charles_Vallée-du-Larry_2022_01', '17IMERIS_Grand-Champ_2022-01', '19PTOR_MNS_filtre_futurs_travaux_2021-10_L93', '19PTOR_MNS_filtre_travaux_realises_2021-10_L93', '19PTOR_ortho_2021-10_L93', '23CELI_marais_du_chancelier_2022_03_24', '23CLAM_Rocher_de_Clamouzat_2020-11', '23DIAB_lande_du_pont_du_diable_nord_2021-10_L93', '23DIAB_lande_du_pont_du_diable_sud_2021-10_L93', '23LAND_RNN_etang_des_landes_2020-08_L93', '33_Lagune-108-2021-08', '79BLVI_Blanchère-de-Viennay_2021-10', '79VGAT_Vallée-du-Gâteau_Pressigny_2020-02', '79VGAT_Vallée-du-Gâteau_Pressigny_2021-10', '86-001_TMM_CA-CD_2020-07', '86-500_Clain-sud_Etang-du-Pin', '86_AT_Chalandray_2021-10', '87CREN_siege_saint_gence_2021-09', '87GRLA_grandes_landes_2021-09-24', '87SANA_sanadie_2021-09-24', 'a_16_030_Prairies_de_Vouharte_2019_09', 'a_17_474_Estauaire_de_la_Gironde_Les_Pr_s_de_la_Rouille_2019_08', 'a_17_474_Estauaire_de_la_Gironde_Moulin_Rompu_2019_08', 'a_17_474_Estuaire_de_la_Gironde_Zone_Humide_de_la_Motte_Ronde_2021_04', 'a_17_IMERIS_Carriere_du_Planton_2021_08_12', 'a_17_LGV_Ragouillis_2021_08_12', 'a_33_Lagune_058_2021_08', 'a_33_Lagune_070_2021_08', 'a_33_Lagune_094_2021_08', 'a_33_Lagune_162_2021_08', 'a_33_Lagune_165_2021_08', 'a_33_Lagunes_207_208_209_2021_08', 'a_79_001_Clussais_la_Pommeraie_2020_11', 'a_79_008_Landes_de_L_Hopiteau_2019_09', 'a_79_020_Bessines_1_avant_travaux_2019_10', 'a_79_020_Bessines_2_pendant_travaux_2019_11', 'a_79_020_Bessines_3_apres_travaux_2020_12', 'a_79_044_Carriere_des_Landes_2020_09', 'a_79_AT_Vernoux_en_Gatine_2020_09', 'a_79_Sources_de_la_Sevre_Niortaise_Pierre_levee_2020_09', 'a_86_001_TMM_AA_2020_06', 'a_86_001_TMM_AB_2020_06', 'a_86_001_TMM_AC_2020_06', 'a_86_001_TMM_AD_2020_06', 'a_86_001_TMM_AE_2020_06', 'a_86_001_TMM_AF_2020_06', 'a_86_001_TMM_AG_2020_07', 'a_86_001_TMM_BA_2020_06', 'a_86_001_TMM_BB_2020_06', 'a_86_001_TMM_BC_2020_06', 'a_86_001_TMM_BD_2020_06', 'a_86_001_TMM_BE_2020_07', 'a_86_001_TMM_BF_2021_06', 'a_86_001_TMM_CB_2020_07', 'a_86_001_TMM_CC_2020_07', 'a_86_001_TMM_CC_2021_06', 'a_86_001_TMM_CD_2021_06', 'a_86_001_TMM_CE_2020_07', 'a_86_001_TMM_CF_2020_09', 'a_86_001_TMM_DA_2020_07', 'a_86_001_TMM_DB_2020_09', 'a_86_001_TMM_DC_2021_06', 'a_86_001_TMM_EA_2020_06', 'a_86_001_TMM_EB_2020_06', 'a_86_001_TMM_EC_2020_06', 'a_86_001_TMM_FA_2020_06', 'a_86_001_TMM_FB_2020_07', 'a_86_001_TMM_FC_2020_07', 'a_86_001_TMM_FC_2021_06', 'a_86_001_TMM_HA_2020_09', 'a_86_001_TMM_IA_2020_06', 'a_86_001_TMM_IB_2020_06', 'a_86_001_TMM_IC_2020_06', 'a_86_001_TMM_JA_2020_07', 'a_86_001_TMM_JB_2020_07', 'a_86_001_TMM_JC_2020_07', 'a_86_001_TMM_JE_2020_07', 'a_86_001_TMM_KA_2020_07', 'a_86_001_TMM_KB_2020_07', 'a_86_003_Falunieres_de_Moulin_Pochas_2019_09', 'a_86_006_Landes_et_pelouses_de_Lussac_Sillars_2019_08', 'a_86_011_Landes_de_Sainte_Marie_2019_09', 'a_86_025_Marais_des_Ragouillis_2020_11', 'a_86_025_Marais_des_Ragouillis_2021_02', 'a_86_026_Etangs_Baro_2019_09', 'a_86_029_Vallee_de_la_Longere_2019_09', 'a_86_037_Tourbiere_des_Regeasses_2021_06', 'a_86_038_Vallees_de_la_Vienne_et_du_Clain_Persac_2019_09', 'a_86_038_Vallees_de_la_Vienne_et_du_Clain_Persac_2020_12', 'a_86_052_Fontaine_le_Comte_nord_2020_11', 'a_86_052_Fontaine_le_Comte_sud_2020_11', 'a_86_054_Vallee_de_la_Vonne_2020_11', 'a_86_058_Carriere_de_Puy_Herve_2021_02_09', 'a_86_058_Carriere_de_Puy_Herve_2021_02_25', 'a_86_060_Bocage_de_la_Geoffronniere_2020_11', 'a_86_Le_Cormier_2021_05']
#
# with open('C:/Users/Romain/Desktop/test.csv', "a+", encoding="ISO-8859-1", newline='') as f:
#     writer = csv.writer(f)
#     for row in fluxWMS:
#         writer.writerow(row.split())

#### Récupération des métadonnées des couches quand disponibles:

# from owslib.wms import WebMapService
# wms = WebMapService('http://geoservices.brgm.fr/geologie?service=WMS+Raster', version='1.1.1')
# print(list(wms.contents))
# print(wms['IDPR'].abstract)